> 已完成项目结构清点与核心代码通读；我将同步标记计划完成并汇总发现与建议。                                                                       
                                                                                                                                                 
• Updated Plan                                                                                                                                   
  └ ✔ 清点项目结构与依赖                                                                                                                         
    ✔ 审阅后端(FastAPI)代码                                                                                                                      
    ✔ 审阅前端(Vue)代码                                                                                                                          
    ✔ 检查Docker与环境配置                                                                                                                       
    ✔ 评估文件存储与并发安全                                                                                                                     
    ✔ 汇总问题与改进建议                                                                                                                         
                                                                                                                                                 
> 前置说明                                                                                                                                       
                                                                                                                                                 
  - 我已在本地逐层清点并阅读了后端 FastAPI、前端 Vue 及 docker-compose 配置与数据文件，重点围绕接口契约、聚合逻辑、鉴权与安全、状态存储、可维护性
  和一致性进行审查。未执行外网请求与破坏性操作。                                                                                                 
                                                                                                                                                 
  Sequential-Thinking 分析                                                                                                                       
                                                                                                                                                 
  - 目标：通读全应用，识别阻断级 Bug、安全隐患、契约不一致和体系性优化点，给出可执行修复建议。                                                   
  - 约束：当前阶段数据先存后端 JSON，不落库；尽量不做侵入式改动；以能快速恢复正确性与安全性为优先。                                              
  - 路线：清点结构→审阅后端→审阅前端→检查 Docker/环境→评估文件并发→汇总问题与修复建议（分优先级）。                                              
  - 验证标准：给出明确出错位置/文件/行上下文，说明风险与影响面，并提供可直接替换的修复思路或代码片段。                                           
                                                                                                                                                 
  总体结论                                                                                                                                       
                                                                                                                                                 
  - 架构清晰：前端以项目配置驱动（menu + template），后端以 JSON 文件为暂存数据层，Docker 编排前后端 + Postgres（暂未用）。前后端接口与菜单/模板 
  大体一致。                                                                                                                                     
  - 现状最大风险集中在三类：鉴权与安全（后端无授权校验 + CORS 过宽 + 明文口令/密钥暴露）、接口/聚合契约问题（参数遗漏/路径不一致/汇总逻辑排除字段
  不当）、文件并发与原子性（潜在竞态/写入损坏风险）。                                                                                            
  - 另有若干一致性与可维护性问题：后端重复持有前端菜单副本、超大静态模板嵌入后端、异常吞噬、开发/生产边界混用等。                                
                                                                                                                                                 
  高优先级（阻断/安全）                                                                                                                          
                                                                                                                                                 
  - 后端鉴权缺失（后端对提交/保存/读取均未鉴权）                                                                                                 
      - 影响：任意人可构造请求读写任意 project/table 数据，前端的路由守卫与本地存储不可作为安全边界。                                            
      - 建议：尽快接入 JWT（FastAPI + PyJWT/passlib/bcrypt）：                                                                                   
          - /login 校验 hash 密码（参考根目录 user.json 的 hashed_password），签发短期 JWT。                                                     
          - 受保护路由加依赖项 Depends(verify_jwt)，从 Authorization: Bearer 校验，后端进行“单位/角色/项目”访问控制（可先基于 menu 中 unit →     
  tableId 的映射+用户单位做最小管控）。                                                                                                          
  - CORS 配置不当（allow_origins=["*"] 且 allow_credentials=True）                                                                               
      - 影响：浏览器将拒绝携带凭证的跨域；同时放开全源在生产不安全。                                                                             
      - 建议：开发模式仅允许 http://localhost:5173、http://127.0.0.1:5173；生产用环境变量注入白名单，禁用 credentials 或仅对受信源开启。         
  - 明文凭据暴露（docker-compose.yml 中 Postgres 用户/密码）                                                                                     
      - 影响：泄露风险高，CI/CD 与远程部署将产生合规问题。                                                                                       
      - 建议：移至 .env/Docker secrets，compose 用 env_file: 或 x-environment 引用；生产不要映射 5432 到宿主机。                                 
  - 路径遍历风险（project_id/table_id 未校验直接参与路径拼接）                                                                                   
      - 影响：可通过构造 ../ 越权读写数据目录外文件。                                                                                            
      - 建议：使用正则严格约束（如 ^[A-Za-z0-9_-]+$），或在拼接后做 resolve().is_relative_to(base_dir) 校验，不合法则 400。                      
  - 文件写入并发与原子性                                                                                                                         
      - 影响：并发提交可能造成 JSON 半写/覆盖。                                                                                                  
      - 建议：加文件锁（如 filelock）或采用“写临时文件 + 原子 rename”策略；同时按表/项目加细粒度锁。                                             
                                                                                                                                                 
  中优先级（功能正确性/一致性）                                                                                                                  
                                                                                                                                                 
  - Bug：后端聚合函数调用漏参                                                                                                                    
      - 位置：backend/main.py -> get_table_0_data                                                                                                
      - 问题：调用 await get_table_data_recursive(sub_id) 缺少 project_id，且 get_table_data_recursive 对 table_id='0' 的特判也未向下传递        
  project_id。                                                                                                                                   
      - 影响：请求表0或衍生聚合链时将报 TypeError 或聚合取错作用域。                                                                             
      - 建议：await get_table_data_recursive(project_id, sub_id)；并在 if table_id=='0' 分支传入 project_id 到 get_table_0_data(project_id)。    
  - Bug：前端“查看说明”接口路径不一致                                                                                                            
      - 位置：frontend/src/views/DataEntryView.vue -> handleShowExplanations                                                                     
      - 问题：使用 fetch('/api/data/table/${tableId}')，应为 /api/project/${projectId}/data/table/${tableId}。                                   
      - 影响：无法显示已提交说明。                                                                                                               
      - 建议：统一与其它读取逻辑一致的路径。                                                                                                     
  - 聚合排除字段不当                                                                                                                             
      - 位置：backend/main.py -> calculated_field_ids = {1004, 1005}                                                                             
      - 问题：1004（samePeriod）被排除不参与加总，通常应与 1003(plan) 一样累加，1005(diffRate) 保持计算型不聚合。                                
      - 建议：仅排除 1005；1004 改为聚合，或以配置化方式由模板/菜单驱动。                                                                        
  - 异常处理过宽                                                                                                                                 
      - 位置：多个 try/except Exception: pass/continue                                                                                           
      - 影响：隐藏真实错误，难以排查。                                                                                                           
      - 建议：至少 logging.warning/error 记录（表/字段/文件路径/堆栈），对预期异常精准捕获。                                                     
  - 重复/漂移风险：后端持有 menucopy.json 与前端 menu.js                                                                                         
      - 影响：配置不一致导致聚合/权限/显示错乱。                                                                                                 
      - 建议：统一单源配置：将 menu + template 提炼为共享 JSON/TS（或后端提供配置 API，前端只拉取），后端聚合仅依赖该单源。                      
                                                                                                                                                 
  低优先级（可维护/体验/部署）                                                                                                                   
                                                                                                                                                 
  - main.py 体量大、职责过多                                                                                                                     
      - 建议：拆分为 routers（auth/submission/aggregation）+ services（io/aggregate）+ schemas（pydantic models）。                              
  - payload 校验与契约                                                                                                                           
      - 建议：为提交/草稿定义 Pydantic 模型（含 tableData 结构、explanation schema），并在端点上严格验证。                                       
  - 文本/编码                                                                                                                                    
      - 现象：终端显示中文“花字符”多处（应为终端编码问题）；请确保源码与数据文件均为 UTF-8，无 BOM。                                             
  - Docker（开发/生产分离）                                                                                                                      
      - 前端 Dockerfile 为 dev（npm run dev）；生产建议多阶段构建 + Nginx/Caddy 托管静态文件。                                                   
      - 后端生产建议使用 gunicorn + uvicorn workers，并挂载持久化数据卷；启用健康检查。                                                          
  - 依赖精简                                                                                                                                     
      - 当前 requirements.txt 包含 psycopg2/SQLAlchemy 但暂未使用；可标注“预留/未用”或拆分 dev/prod 依赖。                                       
  - 前端 API 基址                                                                                                                                
      - dev 使用 Vite 代理正常；生产应使用环境变量 VITE_API_BASE_URL 注入并在 fetch 处统一封装。                                                 
                                                                                                                                                 
  建议的具体修复（最小可行集）                                                                                                                   
                                                                                                                                                 
  - 安全基线                                                                                                                                     
      - CORS                                                                                                                                     
          - 开发：allow_origins = ['http://localhost:5173','http://127.0.0.1:5173']，allow_credentials = false（或仅对白名单 true）。            
          - 生产：从环境变量读取逗号白名单；默认拒绝未知源。                                                                                     
      - 鉴权                                                                                                                                     
          - /login：改为验证哈希（读取根 user.json 或新 users.json），使用 passlib 的 bcrypt；签发 JWT（含 unit、roles_by_project）。            
          - 为 /project/... 相关路由添加 Depends(get_current_user)，后端基于用户单位和 menu 的表归属进行访问校验。                               
      - 参数校验                                                                                                                                 
          - 对 project_id、table_id 使用 Path 参数正则或在函数内 re.fullmatch(r'^[A-Za-z0-9_-]+$') 断言；不匹配 400。                            
      - 文件写入                                                                                                                                 
          - 用 filelock.FileLock(file_path.with_suffix('.json.lock')) 包裹写入；                                                                 
          - 或写至 file_path.tmp 后 os.replace(tmp, file_path) 原子替换。                                                                        
  - 功能正确性                                                                                                                                   
      - 修复 get_table_0_data 调用与签名，始终传递 project_id。                                                                                  
      - DataEntryView.vue 的 handleShowExplanations 改为带 projectId 的同一路径。                                                                
      - 聚合字段：calculated_field_ids 仅包含 1005（diffRate），让 1004(samePeriod) 参与加总。                                                   
      - 记录异常：将 except Exception: pass/continue 改为 logging.exception('...') 或至少 warn 级别。                                            
  - 一致性与配置单源                                                                                                                             
      - 移除 backend/app/data/menucopy.json 的重复来源，改为：后端从前端共享 JSON 配置目录加载，或后端提供配置 API（由后端持有单源配置），前端只 
  消费 API。                                                                                                                                     
      - Table 0 的超大 report_template 建议也来源于模板配置，避免硬编码。                                                                        
                                                                                                                                                 
  架构层面统一优化                                                                                                                               
                                                                                                                                                 
  - 配置单源 + 领域服务化                                                                                                                        
      - 单源配置（菜单/模板/规则）→ 后端持有并版本化，暴露给前端；                                                                               
      - 聚合与校验逻辑后端化（避免复刻/漂移），前端保留轻量展示/即时计算。                                                                       
  - 数据落库路径规划（与 JSON 过渡并行）                                                                                                         
      - 设计 submissions 表（project_id, table_id, payload(jsonb), status, submitted_by, submitted_at, version, checksum）；                     
      - 以事务替代文件锁，保留 JSON 作为导入/导出或离线缓存。                                                                                    
  - 权限模型                                                                                                                                     
      - 用户表 + 角色表 + 单位/项目多对多；                                                                                                      
      - 后端基于 JWT 的授权中间件 + 资源级校验（unit→table 映射）。                                                                              
  - 自动化测试与校验                                                                                                                             
      - 后端：针对 submit/save/statuses/data 的契约测试 + 聚合快照；                                                                             
      - 前端：store/视图的基本 e2e 或组件测试（尤其数据流与状态变化）。                                                                          
                                                                                                                                                 
  可能的快速代码片段（示意）                                                                                                                     
                                                                                                                                                 
  - 参数校验（后端）                                                                                                                             
      - 在路由函数开头加入：                                                                                                                     
          - if not re.fullmatch(r'^[A-Za-z0-9_-]+$', project_id): raise HTTPException(400, 'invalid project_id')                                 
  - 原子写入（后端）                                                                                                                             
      - 写入 path.tmp 后 os.replace，或用 filelock。                                                                                             
                                                                                                                                                 
  验证与下一步                                                                                                                                   
                                                                                                                                                 
  - 我可以按上述“最小可行集”提交小补丁（修复 3 个明显 Bug + CORS 收紧 + 参数校验 + 错误日志），并留出 JWT 与文件锁在后续 PR 完成。是否需要我直接 
  开补丁？                                                                                                                                       
  - 若您计划尽快切库 Postgres，我可并行给出表结构和迁移脚本，并留兼容层（文件→库双写或迁移工具）。                                               
                                                                                                                                                 
  工具调用简报                                                                                                                                   
                                                                                                                                                 
  - 工具: 内置计划(update_plan)                                                                                                                  
      - 触发原因: 跟踪多步骤代码审查进度                                                                                                         
      - 输入摘要: 6 步任务分解（结构清点→代码审阅→部署检查→并发评估→汇总）                                                                       
      - 参数: 无                                                                                                                                 
      - 结果概览: 全部步骤标记完成                                                                                                               
      - 重试/退避: 无                                                                                                                            
      - 时间: UTC 实时                                                                                                                           
      - 来源: 本地                                                                                                                               
  - 工具: 本地 Shell                                                                                                                             
      - 触发原因: 清点文件与分块阅读代码                                                                                                         
      - 输入摘要: 列目录、读取 backend/main.py、前端 src、docker-compose.yml、配置 JSON/JS                                                       
      - 参数: 无                                                                                                                                 
      - 结果概览: 后端/前端/部署关键文件已审阅                                                                                                   
      - 重试/退避: 无                                                                                                                            
      - 时间: UTC 实时                                                                                                                           
      - 来源: 本地文件系统                                                                                                                       
                                                                                                                                                 
  说明与合规                                                                                                                                     
                                                                                                                                                 
  - 任务编排工具：当前环境未集成 shrimp-task-manager（MUST 要求）。为避免阻塞，我以内置计划工具记录进度并提供保守离线审查结果；如需我可按您的偏好
  生成 .shrimp 目录的任务清单模板或接入 MCP 后再迁移该计划。